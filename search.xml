<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>结构详细</title>
    <url>/2020/02/15/%E7%BB%93%E6%9E%84%E8%AF%A6%E7%BB%86/</url>
    <content><![CDATA[<h1 id="结构详细"><a href="#结构详细" class="headerlink" title="结构详细"></a>结构详细</h1><blockquote>
<p>该篇介绍了python的详细结构</p>
</blockquote>
<a id="more"></a>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment">#dir(math)</span></span><br></pre></td></tr></table></figure>

<h3 id="random-随机函数"><a href="#random-随机函数" class="headerlink" title="random 随机函数"></a>random 随机函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line">print(choice(range(<span class="number">10</span>))) <span class="comment">#简单</span></span><br><span class="line">print(randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>))  <span class="comment">#x,y,z,为start，end，step</span></span><br><span class="line">print(random())</span><br><span class="line">print(uniform(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">#x,y为start和end</span></span><br></pre></td></tr></table></figure>

<pre><code>3
1
0.17893877145507286
1.054488927162555</code></pre><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><blockquote>
<p>同C语言</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"my nameis %s,%d years"</span>%(<span class="string">'yb'</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure>

<pre><code>my nameis yb,20 years</code></pre><h3 id="列表详细函数"><a href="#列表详细函数" class="headerlink" title="列表详细函数"></a>列表详细函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list =[]</span><br><span class="line">list.append(<span class="string">"fool"</span>)   <span class="comment">#尾部添加单个元素</span></span><br><span class="line">list.extend([<span class="string">"genius"</span>]) <span class="comment">#尾部添加列表</span></span><br><span class="line"></span><br><span class="line">print(list)</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">0</span>]</span><br><span class="line">print(list)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">list.reverse()</span></span><br><span class="line"><span class="string">反向列表中元素</span></span><br><span class="line"><span class="string">list.sort(cmp=None, key=None, reverse=False)</span></span><br><span class="line"><span class="string">对原列表进行排序</span></span><br><span class="line"><span class="string">list.remove(obj)</span></span><br><span class="line"><span class="string">移除列表中某个值的第一个匹配项</span></span><br><span class="line"><span class="string">list.insert(index, obj)</span></span><br><span class="line"><span class="string">将对象插入列表</span></span><br><span class="line"><span class="string">list.count(obj) </span></span><br><span class="line"><span class="string">统计某个元素在列表中出现的次数</span></span><br><span class="line"><span class="string">list.index(obj)</span></span><br><span class="line"><span class="string">从列表中找出某个值第一个匹配项的索引位置</span></span><br><span class="line"><span class="string">cmp(list1, list2)</span></span><br><span class="line"><span class="string">比较两个列表的元素</span></span><br><span class="line"><span class="string">len(list)</span></span><br><span class="line"><span class="string">列表元素个数</span></span><br><span class="line"><span class="string">max(list)</span></span><br><span class="line"><span class="string">返回列表元素最大值</span></span><br><span class="line"><span class="string">list(seq)</span></span><br><span class="line"><span class="string">将元组转换为列表</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<pre><code>[&apos;fool&apos;, &apos;genius&apos;]
[&apos;genius&apos;]</code></pre><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul>
<li>注意一个元素的元组为 tup1 = (50,)</li>
<li>注意不允许删改，必须新建</li>
<li>方法同列表</li>
</ul>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul>
<li>键不可变，值可以</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line">dict[<span class="string">'Name'</span>]=<span class="string">'yb'</span></span><br><span class="line">dict[<span class="string">'x'</span>]=<span class="number">4</span></span><br><span class="line">print(dict)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dict.keys():   <span class="comment">#keys返回键值</span></span><br><span class="line">    print(dict[i],end=<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dict.values():  <span class="comment">#values返回值</span></span><br><span class="line">    print(i,end=<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dict.items():   <span class="comment"># items 返回键和值的二元组</span></span><br><span class="line">    print(i[<span class="number">0</span>],end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">dict.clear()</span></span><br><span class="line"><span class="string">删除字典内所有元素</span></span><br><span class="line"><span class="string">dict.copy()</span></span><br><span class="line"><span class="string">返回一个字典的浅复制</span></span><br><span class="line"><span class="string">dict.deepcopy()</span></span><br><span class="line"><span class="string">返回一个字典的深复制</span></span><br><span class="line"><span class="string">dict.fromkeys(seq[, val])</span></span><br><span class="line"><span class="string">创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</span></span><br><span class="line"><span class="string">dict.update(dict2)</span></span><br><span class="line"><span class="string">把字典dict2的键/值对更新到dict里</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<pre><code>{&apos;Name&apos;: &apos;yb&apos;, &apos;Age&apos;: 7, &apos;Class&apos;: &apos;First&apos;, &apos;x&apos;: 4}
yb 7 First 4 yb 7 First 4 Name
Age
Class
x</code></pre>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>基础类</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title>基本语句</title>
    <url>/2020/02/15/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h1><blockquote>
<p>该篇介绍了python的基本语句</p>
</blockquote>
<a id="more"></a>

<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 判断条件：</span><br><span class="line">    执行语句……</span><br><span class="line">elif 判断条件：</span><br><span class="line">    执行语句</span><br><span class="line">else：</span><br><span class="line">    执行语句……</span><br></pre></td></tr></table></figure>

<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ol>
<li>while循环</li>
<li>for循环</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">9</span>):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'The count is:'</span>, count)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"循环结束"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>The count is: 0
The count is: 1
The count is: 2
The count is: 3
The count is: 4
The count is: 5
The count is: 6
The count is: 7
The count is: 8
循环结束
Good bye!</code></pre><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python'</span>:     <span class="comment"># 第一个实例</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'当前字母 :'</span>, letter)</span><br><span class="line"> </span><br><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'apple'</span>,  <span class="string">'mango'</span>]</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:        <span class="comment"># 第二个实例</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'当前水果 :'</span>, fruit)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(fruits)):</span><br><span class="line">    print(fruits[i])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"x"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>当前字母 : P
当前字母 : y
当前字母 : t
当前字母 : h
当前字母 : o
当前字母 : n
当前水果 : banana
当前水果 : apple
当前水果 : mango
banana
apple
mango
x
Good bye!</code></pre><h4 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,i):</span><br><span class="line">        <span class="keyword">if</span>(i%j==<span class="number">0</span>):</span><br><span class="line">            print(i,end=<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<pre><code>4 6 8 9 10 12 14 15 16 18 </code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">20</span>):</span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;i):</span><br><span class="line">        <span class="keyword">if</span>(i%j == <span class="number">0</span>): <span class="keyword">break</span></span><br><span class="line">        j=j+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(j&gt;=i): print(i,<span class="string">"是素数"</span>,end=<span class="string">' '</span>)</span><br><span class="line">    i=i+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<pre><code>2 是素数 3 是素数 5 是素数 7 是素数 11 是素数 13 是素数 17 是素数 19 是素数 </code></pre>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>基础类</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title>变量类型及数据结构</title>
    <url>/2020/02/15/%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="变量类型及数据结构"><a href="#变量类型及数据结构" class="headerlink" title="变量类型及数据结构"></a>变量类型及数据结构</h1><blockquote>
<p>该篇介绍了python的变量类型，字符串以及简单的列表，元组和字典</p>
</blockquote>
<a id="more"></a>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol>
<li><p>s=”a1a2···an”(n&gt;=0) </p>
<ul>
<li>从左到右索引<strong>默认0开始</strong>的，最大范围是字符串长度少1</li>
<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>
</ul>
</li>
<li><p>加号（+）是字符串连接运算符，星号（*）是重复操作</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"hello,world"</span></span><br><span class="line">print(str)      <span class="comment"># 输出完成字符串</span></span><br><span class="line">print(str[<span class="number">2</span>])   <span class="comment"># 输出字符串的地三个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## [x,y,z] 输出x到y间的字符，包括x，不包括y，步长为z</span></span><br><span class="line">print(str[<span class="number">2</span>:<span class="number">5</span>:<span class="number">2</span>]) <span class="comment"># 输出第三道第六个字符，不包括第六个</span></span><br><span class="line">print(str[<span class="number">2</span>:])  <span class="comment"># 输出第3个开头</span></span><br><span class="line">print(str*<span class="number">2</span>)</span><br><span class="line">print(str+<span class="string">"s"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>hello,world
l
lo
llo,world
hello,worldhello,world
hello,worlds</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><blockquote>
<p>操作同字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [ <span class="string">'runoob'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">'john'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (list)               <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">0</span>])            <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">1</span>:<span class="number">3</span>] )         <span class="comment"># 输出第二个至第三个元素 </span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">2</span>:] )          <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinylist * <span class="number">2</span>)       <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="keyword">print</span> (list + tinylist)    <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure>

<pre><code>[&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2]
runoob
[786, 2.23]
[2.23, &apos;john&apos;, 70.2]
[123, &apos;john&apos;, 123, &apos;john&apos;]
[&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2, 123, &apos;john&apos;]</code></pre><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote>
<p>相当于只读列表</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = (<span class="string">'runoob'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> )</span><br><span class="line">tinylist = (<span class="number">123</span>, <span class="string">'john'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (list)               <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">0</span>])            <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">1</span>:<span class="number">3</span>] )         <span class="comment"># 输出第二个至第三个元素 </span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">2</span>:] )          <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinylist * <span class="number">2</span>)       <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="keyword">print</span> (list + tinylist)    <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure>

<pre><code>(&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2)
runoob
(786, 2.23)
(2.23, &apos;john&apos;, 70.2)
(123, &apos;john&apos;, 123, &apos;john&apos;)
(&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2, 123, &apos;john&apos;)</code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><blockquote>
<p>通过键来存取，而非偏移</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"This is one"</span></span><br><span class="line">dict[<span class="number">2</span>] = <span class="string">"This is two"</span></span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'john'</span>,<span class="string">'code'</span>:<span class="number">6734</span>, <span class="string">'dept'</span>: <span class="string">'sales'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (dict[<span class="string">'one'</span>])          <span class="comment"># 输出键为'one' 的值</span></span><br><span class="line"><span class="keyword">print</span> (dict[<span class="number">2</span>])              <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="keyword">print</span> (tinydict)             <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.keys())      <span class="comment"># 输出所有键,结果为列表</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.values())    <span class="comment"># 输出所有值，结果为列表</span></span><br></pre></td></tr></table></figure>

<pre><code>This is one
This is two
{&apos;name&apos;: &apos;john&apos;, &apos;code&apos;: 6734, &apos;dept&apos;: &apos;sales&apos;}
dict_keys([&apos;name&apos;, &apos;code&apos;, &apos;dept&apos;])
dict_values([&apos;john&apos;, 6734, &apos;sales&apos;])</code></pre><h3 id="数据转换类型"><a href="#数据转换类型" class="headerlink" title="数据转换类型"></a>数据转换类型</h3><p>列举较为重要的</p>
<ul>
<li>tuple(s),list(s)</li>
<li>set(s) 转换为可变集合</li>
<li>frozenset(s) 不可变集合</li>
<li>dict(s) 创建一个字典。d 必须是一个序列 (key,value)元组。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>基础类</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2020/02/15/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="markdown基本语法"><a href="#markdown基本语法" class="headerlink" title="markdown基本语法"></a>markdown基本语法</h1><blockquote>
<p>该篇介绍了markdown 的基本语法及typora的快捷键</p>
</blockquote>
<a id="more"></a>

<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ol>
<li>n个#代表了n级标题</li>
<li>typora 快捷键 ctrl+ n</li>
</ol>
<h3 id="粗体-斜体、删除线和下划线"><a href="#粗体-斜体、删除线和下划线" class="headerlink" title="粗体 斜体、删除线和下划线"></a>粗体 斜体、删除线和下划线</h3><ol>
<li><em>斜体</em>  （**包围）快捷键ctrl+i  （italic）</li>
<li><strong>粗体</strong>（四个*包围）快捷键 ctrl+b （bold）</li>
<li><strong><em>加粗斜体</em></strong>  （6分*包围） 无快捷键</li>
<li><del>删除线</del> （4个~包围）无快捷键</li>
<li>下划线 快捷键 ctrl+u （underline） <u>快乐</u></li>
</ol>
<h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><blockquote>
<p>文字 用&gt;开头</p>
</blockquote>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><code>行内代码</code>   //用两个`包围，必须时英文字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多行代码 &#x2F;&#x2F;用6个&#96;包围 ，必须英文</span><br></pre></td></tr></table></figure>

<h3 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h3><p>$$<br>数学公式，用$$$$包围<br>$$</p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><ol>
<li><hr>
<p>用3个-或+或*都可</p>
</li>
</ol>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>+,-,*代表无须列表</li>
<li>1.代表有序列表项</li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>直接记忆快捷项 ctrl+t（table)</p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><a href="www.baidu.com">ssss</a></p>
<p>&lt;<a href="http://www.baidu.com&gt;" target="_blank" rel="noopener">www.baidu.com&gt;</a></p>
<p>1.用【l链接文字】（链接地址）//用英文 快捷键ctrl+k </p>
<p>2.用《链接地址》 //用英文</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片文字](图片地址 &quot;图片描述&quot;)</span><br></pre></td></tr></table></figure>

<p>快捷键ctrl+shift+i (image)</p>
]]></content>
      <categories>
        <category>makedown</category>
      </categories>
      <tags>
        <tag>基础类</tag>
      </tags>
  </entry>
  <entry>
    <title>python_start</title>
    <url>/2020/02/15/python-start/</url>
    <content><![CDATA[<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><blockquote>
<p>该篇介绍了python 的基础</p>
</blockquote>
<a id="more"></a>

<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul>
<li>在 Python 里，标识符由字母、数字、下划线组成。</li>
<li>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。</li>
<li>Python 中的标识符是区分大小写的。</li>
<li>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</li>
<li>以双下划线开头的 <strong>foo 代表类的私有成员，以双下划线开头和结尾的 __foo</strong> 代表 Python 里特殊方法专用的标识，如 <strong>init</strong>() 代表类的构造函数。</li>
</ul>
<hr>
<h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><blockquote>
<p>略</p>
</blockquote>
<h3 id="行和缩进"><a href="#行和缩进" class="headerlink" title="行和缩进"></a>行和缩进</h3><blockquote>
<p>4个空格</p>
</blockquote>
<hr>
<h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><blockquote>
<p>\</p>
</blockquote>
<hr>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>#单行</li>
<li>“”” “””  多行注释</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">"按下enter键退出\n"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>按下enter键退出</code></pre><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><blockquote>
<p><del>不换行加逗号</del>,实测没用，用第一种方法吧</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">"a"</span></span><br><span class="line">y = <span class="string">"b"</span></span><br><span class="line">print(x,y)</span><br><span class="line">print(x)</span><br><span class="line">print(<span class="string">"-----"</span>)</span><br><span class="line">print(x,)</span><br><span class="line">print(y,)</span><br></pre></td></tr></table></figure>

<pre><code>a b
a
-----
a
b</code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>多变量赋值</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">a=b=c a,b,c分在同一个内存区</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a=b=c=<span class="number">1</span> </span><br><span class="line">print(a)</span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">q,w=1,1 在多个位置</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">q,w =<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">print(q)</span><br><span class="line">w=<span class="number">2</span></span><br><span class="line">print(w)</span><br><span class="line"></span><br><span class="line"><span class="comment">## del 删除了引用，但不是删除空间，所以b可以用</span></span><br><span class="line"><span class="keyword">del</span> a  </span><br><span class="line"><span class="comment">#print(a) 报错</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<pre><code>1
2
1
2
2</code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>挑有用的讲</p>
<ul>
<li>a**b ，返回a的b次幂</li>
<li>a//b ，返回a整除b，向下取整</li>
<li>逻辑符为 and or not</li>
<li>成员运算符 in 和not in  如果在指定的序列中找到值返回 True，否则返回 False。</li>
<li>身份运算符 is 和is not    is 是判断两个标识符是不是引用自一个对象</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>基础类</tag>
        <tag>语言</tag>
      </tags>
  </entry>
</search>
